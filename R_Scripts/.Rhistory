my_colors <- c("#4DAF4A", "#FF7F00")
# Create the scatter plot with custom color scheme
ggplot(final_subset, aes(x = age, y = gene_expression_value, color = icu_status)) +
geom_point(size = 3) +
scale_color_manual(values = my_colors) +
theme_minimal() +
ggtitle("Custom Themed Scatter Plot with Two Groups") +
xlab("Age") +
ylab("Gene Expression")
# ggplot(final_subset, aes(x = disease_status, y = gene_expression_value, fill = icu_status)) +
#   geom_boxplot() +
#   ggtitle("Boxplot of Gene Expression by COVID and ICU Status") +
#   xlab("COVID Status") +
#   ylab("Gene Expression") +
#   scale_fill_manual(values = c("lightblue", "lightgreen"))
#   #facet_grid(ICU_status ~ ., scales = "free_y", labeller = label_wrap_gen(multi_line = TRUE))
my_colors <- c("#377eb8", "#e41a1c")
ggplot(final_subset, aes(x = disease_status, y = gene_expression_value, fill = icu_status)) +
geom_boxplot(color = "black", width = 0.5, alpha = 0.8) +
scale_fill_manual(values = my_colors) +
theme_minimal() +
ggtitle("Custom Themed Box Plot with Two Groups") +
xlab("Group") +
ylab("Value")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "black", fill = "coral") +
# Customizing the plot (optional)
ggtitle("Histogram of gene expression") +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "black", fill = "skyblue") +
ggtitle("Histogram of gene expression") +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "coral", fill = "skyblue") +
ggtitle("Histogram of gene expression") +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "navy", fill = "skyblue") +
ggtitle("Histogram of gene expression") +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "navy", fill = "pink") +
ggtitle("Histogram of gene expression") +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "navy", fill = "pink") +
ggtitle("Histogram of gene expression") +
theme_minimal() +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "navy", fill = "pink") +
ggtitle("Histogram of gene expression") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
text = element_text(color = "white")
) +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "navy", fill = "lightyellow") +
ggtitle("Histogram of gene expression") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
text = element_text(color = "white")
) +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "navy", fill = "lightyellow") +
ggtitle("Histogram of gene expression") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
text = element_text(color = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "navy", fill = "lightyellow") +
ggtitle("Histogram of gene expression") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
text = element_text(color = "white"),
panel.grid = element_blank(),  # Remove grid lines
axis.line = element_line(color = "white")
) +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "navy", fill = "lightyellow") +
ggtitle("Histogram of gene expression") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),  # Set axis text color to white
panel.grid = element_blank()
) +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "navy", fill = "gold") +
ggtitle("Histogram of gene expression") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),  # Set axis text color to white
panel.grid = element_blank()
) +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "white", fill = "gold") +
ggtitle("Histogram of gene expression") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),  # Set axis text color to white
panel.grid = element_blank()
) +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "white", fill = "lightpink") +
ggtitle("Histogram of gene expression") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),  # Set axis text color to white
panel.grid = element_blank()
) +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "white", fill = "#DB7093") +
ggtitle("Histogram of gene expression") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),  # Set axis text color to white
panel.grid = element_blank()
) +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "white", fill = "#DB7093") +
ggtitle("Histogram of gene expression", color = "white") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),  # Set axis text color to white
panel.grid = element_blank()
) +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "white", fill = "#DB7093") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),  # Set axis text color to white
panel.grid = element_blank()
) +
ggtitle("Histogram of gene expression") +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "white", fill = "#DB7093") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),  # Set axis text color to white
panel.grid = element_blank(),
plot.title = element_text(color = "white", size = 16, face = "bold", hjust = 0.5)
) +
ggtitle("Histogram of gene expression") +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "white", fill = "#DB7093") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),  # Set axis text color to white
panel.grid = element_blank(),
plot.title = element_text(color = "white", size = 16, face = "bold")
) +
ggtitle("Histogram of gene expression") +
xlab("gene expression")+
ylab("Frequency")
# Create the histogram plot for Gene Expression
# Create the histogram
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "white", fill = "#DB7093") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),  # Set axis text color to white
panel.grid = element_blank(),
plot.title = element_text(color = "white", size = 16, face = "bold", hjust = 0.4)
) +
ggtitle("Histogram of gene expression") +
xlab("gene expression")+
ylab("Frequency")
# ggplot(final_subset, aes(x = age, y = gene_expression_value)) +
#   geom_point(color = "blue") +
#   ggtitle("Scatter Plot of Gene Expression vs. Age") +
#   xlab("Age") +
#   ylab("Gene Expression")
my_colors_1 <- c("#4DAF4A", "#FF7F00")
# Create the scatter plot with custom color scheme
ggplot(final_subset, aes(x = age, y = gene_expression_value, color = icu_status)) +
geom_point(size = 3) +
scale_color_manual(values = my_colors) +
theme_minimal() +
ggtitle("Scatter Plot: Gene Expression VS Age with ICU Status") +
xlab("Age") +
ylab("Gene Expression")
# ggplot(final_subset, aes(x = age, y = gene_expression_value)) +
#   geom_point(color = "blue") +
#   ggtitle("Scatter Plot of Gene Expression vs. Age") +
#   xlab("Age") +
#   ylab("Gene Expression")
my_colors_1 <- c("#4DAF4A", "#FF7F00")
# Create the scatter plot with custom color scheme
ggplot(final_subset, aes(x = age, y = gene_expression_value, color = icu_status)) +
geom_point(size = 3) +
scale_color_manual(values = my_colors_1) +
theme_minimal() +
ggtitle("Scatter Plot: Gene Expression VS Age with ICU Status") +
xlab("Age") +
ylab("Gene Expression")
# ggplot(final_subset, aes(x = disease_status, y = gene_expression_value, fill = icu_status)) +
#   geom_boxplot() +
#   ggtitle("Boxplot of Gene Expression by COVID and ICU Status") +
#   xlab("COVID Status") +
#   ylab("Gene Expression") +
#   scale_fill_manual(values = c("lightblue", "lightgreen"))
#   #facet_grid(ICU_status ~ ., scales = "free_y", labeller = label_wrap_gen(multi_line = TRUE))
my_colors_2 <- c("#377eb8", "#e41a1c")
ggplot(final_subset, aes(x = disease_status, y = gene_expression_value, fill = icu_status)) +
geom_boxplot(color = "black", width = 0.5, alpha = 0.8) +
scale_fill_manual(values = my_colors_2) +
theme_minimal() +
ggtitle("Custom Themed Box Plot with Two Groups") +
xlab("Group") +
ylab("Value")
# ggplot(final_subset, aes(x = age, y = gene_expression_value)) +
#   geom_point(color = "blue") +
#   ggtitle("Scatter Plot of Gene Expression vs. Age") +
#   xlab("Age") +
#   ylab("Gene Expression")
my_colors_1 <- c("#4DAF4A", "#FF7F00")
# Create the scatter plot with custom color scheme
ggplot(final_subset, aes(x = age, y = gene_expression_value, color = icu_status)) +
geom_point(size = 3) +
scale_color_manual(values = my_colors_1) +
theme_minimal() +
ggtitle("Scatter Plot: Gene Expression VS Age with ICU Status", size = 16, face = "bold", hjust = 0.4) +
xlab("Age") +
ylab("Gene Expression")
# ggplot(final_subset, aes(x = age, y = gene_expression_value)) +
#   geom_point(color = "blue") +
#   ggtitle("Scatter Plot of Gene Expression vs. Age") +
#   xlab("Age") +
#   ylab("Gene Expression")
my_colors_1 <- c("#4DAF4A", "#FF7F00")
# Create the scatter plot with custom color scheme
ggplot(final_subset, aes(x = age, y = gene_expression_value, color = icu_status)) +
geom_point(size = 3) +
scale_color_manual(values = my_colors_1) +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),
panel.grid = element_blank(),
plot.title = element_text(color = "white", size = 16, face = "bold", hjust = 0.4)
) +
theme_minimal() +
ggtitle("Scatter Plot: Gene Expression VS Age with ICU Status") +
xlab("Age") +
ylab("Gene Expression")
# ggplot(final_subset, aes(x = age, y = gene_expression_value)) +
#   geom_point(color = "blue") +
#   ggtitle("Scatter Plot of Gene Expression vs. Age") +
#   xlab("Age") +
#   ylab("Gene Expression")
my_colors_1 <- c("#4DAF4A", "#FF7F00")
# Create the scatter plot with custom color scheme
ggplot(final_subset, aes(x = age, y = gene_expression_value, color = icu_status)) +
geom_point(size = 3) +
scale_color_manual(values = my_colors_1) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),
panel.grid = element_blank(),
plot.title = element_text(color = "white", size = 16, face = "bold", hjust = 0.4)
) +
ggtitle("Scatter Plot: Gene Expression VS Age with ICU Status") +
xlab("Age") +
ylab("Gene Expression")
# ggplot(final_subset, aes(x = age, y = gene_expression_value)) +
#   geom_point(color = "blue") +
#   ggtitle("Scatter Plot of Gene Expression vs. Age") +
#   xlab("Age") +
#   ylab("Gene Expression")
my_colors_1 <- c("#4DAF4A", "#FF7F00")
# Create the scatter plot with custom color scheme
ggplot(final_subset, aes(x = age, y = gene_expression_value, color = icu_status)) +
geom_point(size = 3) +
scale_color_manual(values = my_colors_1) +
theme_minimal() +
theme(
plot.title = element_text(color = "navy", size = 13, face = "bold", hjust = 0.4)
) +
ggtitle("Scatter Plot: Gene Expression vs Age with ICU Status") +
xlab("Age") +
ylab("Gene Expression")
my_colors_2 <- c("#377eb8", "#e41a1c")
ggplot(final_subset, aes(x = disease_status, y = gene_expression_value, fill = icu_status)) +
geom_boxplot(color = "black", width = 0.5, alpha = 0.8) +
scale_fill_manual(values = my_colors_2) +
theme_minimal() +
ggtitle("Box plot of Gene Expression by COVID and ICU Status") +
xlab("Disease Status") +
ylab("Gene Expression")
# ggplot(final_subset, aes(x = age, y = gene_expression_value)) +
#   geom_point(color = "blue") +
#   ggtitle("Scatter Plot of Gene Expression vs. Age") +
#   xlab("Age") +
#   ylab("Gene Expression")
my_colors_1 <- c("#4DAF4A", "#FF7F00")
# Create the scatter plot with custom color scheme
ggplot(final_subset, aes(x = age, y = gene_expression_value, color = icu_status)) +
geom_point(size = 3) +
scale_color_manual(values = my_colors_1) +
theme_minimal() +
theme(
plot.title = element_text(color = "navy", size = 13, face = "bold", hjust = 0.4)
) +
ggtitle("Scatter Plot: Gene Expression vs Age with ICU Status") +
xlab("Age") +
ylab("Gene Expression")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
setwd("../")
data_gene_Expression <- read.csv("data/QBS103_finalProject_geneExpression.csv", header=TRUE)
# head(data_gene_Expression)
data_meta <- read.csv("data/QBS103_finalProject_metadata.csv", header=TRUE)
#head(data_meta)
#Since we have so many columns that are the data we need to combine our df with other file, we convert this wide from into long form
data_gene_Expression.longForm <- data_gene_Expression %>%
pivot_longer(cols = starts_with(c("COVID_","NONCOVID_")),
names_to = "participant_id",
values_to = "gene_expression_value"
)
#make a final data frame by combining the two data sets
final_df <- data_gene_Expression.longForm %>% inner_join( data_meta,
by=c('participant_id'))
#rename with x column with gene
final_df <- rename(final_df, gene = X)
#convert all the unknown strings in the data from to NAs
#final_df$apacheii <- na_if(final_df$apacheii, ' unknown')
final_df[, 16:27][final_df[, 16:27] == ' unknown' | final_df[, 16:27] == 'unknown'] <- NA
#format the disease status column to just include the status
final_df$disease_status <- sub('disease state: ', '', final_df$disease_status)
#convert the column type of disease_status, sex, icu_status and mechanical_ventilation to factor
final_df <- final_df %>%
mutate_at(vars(disease_status, sex, icu_status, mechanical_ventilation), as.factor)
#the class of age, charlson_score is character where it should be numerical
#Convert it to integer
#final_df$age <- as.integer(final_df$age)
final_df <- final_df %>%
mutate_at(vars(age, apacheii,ferritin.ng.ml., crp.mg.l., ddimer.mg.l_feu., procalcitonin.ng.ml.., lactate.mmol.l., fibrinogen, sofa), as.integer)
#lets see the unique genes are there in the data frame
unique(final_df$gene)
#frequency_df <- data.frame('gene' = unique(final_df$gene),'')
#frequency_df <- as.data.frame(table(final_df$gene))
# i will choose the  gene
# my one  continuous covariate would be age and the two categorical covariates would be ICU status and disease status
#ABCB10
final_subset <- final_df[final_df$gene == 'AAMP', c('gene','gene_expression_value','age', 'icu_status', 'disease_status')]
# Create the histogram plot for Gene Expression
ggplot(final_subset, aes(x = gene_expression_value))  +
geom_histogram(binwidth = 2, color = "white", fill = "#DB7093") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.line = element_line(color = "white"),
axis.text = element_text(color = "white"),
panel.grid = element_blank(),
plot.title = element_text(color = "white", size = 16, face = "bold", hjust = 0.4)
) +
ggtitle("Histogram of gene expression") +
xlab("gene expression")+
ylab("Frequency")
# ggplot(final_subset, aes(x = age, y = gene_expression_value)) +
#   geom_point(color = "blue") +
#   ggtitle("Scatter Plot of Gene Expression vs. Age") +
#   xlab("Age") +
#   ylab("Gene Expression")
my_colors_1 <- c("#4DAF4A", "#FF7F00")
# Create the scatter plot with custom color scheme
ggplot(final_subset, aes(x = age, y = gene_expression_value, color = icu_status)) +
geom_point(size = 3) +
scale_color_manual(values = my_colors_1) +
theme_minimal() +
theme(
plot.title = element_text(color = "navy", size = 13, face = "bold", hjust = 0.4)
) +
ggtitle("Scatter Plot: Gene Expression vs Age with ICU Status") +
xlab("Age") +
ylab("Gene Expression")
my_colors_2 <- c("#377eb8", "#e41a1c")
ggplot(final_subset, aes(x = disease_status, y = gene_expression_value, fill = icu_status)) +
geom_boxplot(color = "black", width = 0.5, alpha = 0.8) +
scale_fill_manual(values = my_colors_2) +
theme_minimal() +
ggtitle("Box plot of Gene Expression by COVID and ICU Status") +
xlab("Disease Status") +
ylab("Gene Expression")
my_colors_2 <- c("#377eb8", "#e41a1c")
ggplot(final_subset, aes(x = disease_status, y = gene_expression_value, fill = icu_status)) +
geom_boxplot(color = "black", width = 0.5, alpha = 0.8) +
scale_fill_manual(values = my_colors_2) +
theme_minimal() +
theme_minimal() +
theme(
plot.title = element_text(color = "darkgreen", size = 13, face = "bold", hjust = 0.4)
)+
ggtitle("Box plot of Gene Expression by COVID and ICU Status") +
xlab("Disease Status") +
ylab("Gene Expression")
